name: Install dependencies

on:
  workflow_call:
    inputs:
      working-directory:
        description: "The directory name in which to install dependencies. Defaults to github.workspace"
        default: ""
        required: false
        type: string
      legacy-peer-deps:
        description: "Optionally run npm with --legacy-peer-deps. Defaults to false"
        default: false
        required: false
        type: boolean
      package-manager:
        description: "The packager manager with which to run install. Defaults to npm"
        default: "npm"
        required: false
        type: string

    outputs:
      cache-path:
        description: "The path to cached dependencies"
        value: ${{ jobs.install.outputs.cache-path }}
      cache-key:
        description: "The key for cached dependencies"
        value: ${{ jobs.install.outputs.cache-key }}
      cache-restore:
        description: "The restore key for cached dependencies"
        value: ${{ jobs.install.outputs.cache-restore }}

jobs:
  install:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ${{ inputs.working-directory || github.workspace }}

    env:
      PATH_PREFIX: ${{ inputs.working-directory && format('{0}/{1}', github.workspace, inputs.working-directory) || github.workspace }}
      CACHE_PREFIX: ${{ inputs.working-directory && format('{0}-', inputs.working-directory) || '' }}
      PACKAGE_LOCK: ${{ inputs.package-manager == 'pnpm' && 'pnpm-lock.yaml' || 'package-lock.json' }}
      INSTALL_CMD: ${{ inputs.package-manager == 'pnpm' && 'pnpm install' || 'npm ci' }}

    outputs:
      cache-path: ${{ steps.cache.outputs.path }}
      cache-key: ${{ steps.cache.outputs.key }}
      cache-restore: ${{ steps.cache.outputs.restore }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 16
          cache: "npm"
          cache-dependency-path: ${{ env.PATH_PREFIX }}/${{ env.PACKAGE_LOCK }}
          # Our Design System is on github's package registry
          registry-url: "https://npm.pkg.github.com"

      - name: Set cache outputs
        id: cache
        run: |
          echo "path=${{ env.PATH_PREFIX }}/node_modules" >> $GITHUB_OUTPUT
          echo "key=${{ format('{0}node_modules-{1}', env.CACHE_PREFIX, hashFiles(format('{0}/{1}', env.PATH_PREFIX, env.PACKAGE_LOCK))) }}" >> $GITHUB_OUTPUT
          echo "restore=${{ format('{0}node_modules-', env.CACHE_PREFIX) }}" >> $GITHUB_OUTPUT

      - name: Cache dependencies
        id: cache-dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.cache.outputs.path }}
          key: ${{ steps.cache.outputs.key }}
          restore-keys: ${{ steps.cache.outputs.restore }}

      # Skip post-install scripts here, as a malicious script could steal NODE_AUTH_TOKEN.
      - name: Install dependencies (without scripts)
        id: install
        if: steps.cache-dependencies.outputs.cache-hit != 'true'
        run: ${{ env.INSTALL_CMD }} --ignore-scripts ${{ inputs.legacy-peer-deps == true && '--legacy-peer-deps' || '' }}
        env:
          # See https://github.com/actions/setup-node/blob/main/docs/advanced-usage.md#use-private-packages
          NODE_AUTH_TOKEN: ${{ secrets.GPR_READ_TOKEN }}

      # `npm rebuild` will run all those post-install scripts for us.
      - name: Run post-install scripts
        if: steps.install.outcome == 'success'
        run: ${{ inputs.package-manager }} rebuild && ${{ inputs.package-manager }} run prepare --if-present
