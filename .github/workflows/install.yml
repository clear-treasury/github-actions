name: Install dependencies

on:
  workflow_call:
    inputs:
      working-directory:
        description: "The directory name in which to install dependencies. Defaults to github.workspace"
        default: ""
        required: false
        type: string
      legacy-peer-deps:
        description: "Optionally run npm with --legacy-peer-deps. Defaults to false"
        default: false
        required: false
        type: boolean

    outputs:
      cache-path:
        description: "The path to cached dependencies"
        value: ${{ jobs.install.outputs.cache-path }}
      cache-key:
        description: "The key for cached dependencies"
        value: ${{ jobs.install.outputs.cache-key }}
      cache-restore:
        description: "The restore key for cached dependencies"
        value: ${{ jobs.install.outputs.cache-restore }}

jobs:
  install:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ${{ inputs.working-directory || github.workspace }}

    env:
      PATH_PREFIX: ${{ inputs.working-directory != '' && format('{0}/{1}', github.workspace, inputs.working-directory) || github.workspace }}
      CACHE_PREFIX: ${{ inputs.working-directory != '' && format('{0}-', inputs.working-directory) || '' }}

    outputs:
      cache-path: ${{ steps.cache.outputs.path }}
      cache-key: ${{ steps.cache.outputs.key }}
      cache-restore: ${{ steps.cache.outputs.restore }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: "npm"
          # Our Design System is on github's package registry
          registry-url: "https://npm.pkg.github.com"

      - name: Set cache outputs
        id: cache
        run: |
          echo ::set-output name=path::${{ env.PATH_PREFIX }}/node_modules
          echo ::set-output name=key::${{ format('{0}node_modules-{1}', env.CACHE_PREFIX, hashFiles(format('{0}/package-lock.json', env.PATH_PREFIX))) }}
          echo ::set-output name=restore::${{ format('{0}node_modules-', env.CACHE_PREFIX) }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.cache.outputs.path }}
          key: ${{ steps.cache.outputs.key }}
          restore-keys: ${{ steps.cache.outputs.restore }}

      # Skip post-install scripts here, as a malicious script could steal NODE_AUTH_TOKEN.
      - name: Install dependencies (without scripts)
        run: npm ci --ignore-scripts ${{ inputs.legacy-peer-deps == true && '--legacy-peer-deps' || '' }}
        env:
          # See https://github.com/actions/setup-node/blob/main/docs/advanced-usage.md#use-private-packages
          NODE_AUTH_TOKEN: ${{ secrets.GPR_READ_TOKEN }}

      # `npm rebuild` will run all those post-install scripts for us.
      - name: Run post-install scripts
        run: npm rebuild && npm run prepare --if-present
