name: CDK TBD pipeline
on:
  workflow_call:
    secrets:
      prod-aws-access-key-id:
        required: true
      prod-aws-secret-access-key:
        required: true
      prod-aws-region:
        required: true

      nonprod-aws-access-key-id:
        required: true
      nonprod-aws-secret-access-key:
        required: true
      nonprod-aws-region:
        required: true

    inputs:
      debug:
        required: false
        type: boolean
        default: false

      working-directory:
        required: false
        type: string
        default: .

      infra-working-directory:
        required: false
        type: string
        default: .

      do-integration-test:
        required: false
        type: boolean
        default: false

      integration-test-working-directory:
        required: false
        type: string
        default: .

      overlay-artifact-dev:
        required: false
        type: string

      overlay-artifact-prod:
        required: false
        type: string

      overlay-cache-key-dev:
        required: false
        type: string

      overlay-cache-key-prod:
        required: false
        type: string

jobs:
  debug:
    runs-on: ubuntu-latest
    if: inputs.debug
    steps:
      - name: debug
        run: echo ${{ toJSON(inputs) }}

  setup-npm:
    runs-on: ubuntu-latest
    if: inputs.working-directory != inputs.infra-working-directory
    steps:
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          # AWS lambdas are still on Node 14 https://github.com/aws/aws-lambda-base-images/issues/14
          node-version: "14"
          # The Design system is on github's package registry
          cache: "npm"

      - name: Cache app dependencies
        uses: actions/cache@v3
        with:
          path: node_modules
          key: cdk-deploy-node_modules-${{ hashFiles('package-lock.json') }}
          restore-keys: cdk-deploy-node_modules-

      # Skip post-install scripts here, as a malicious script could steal NODE_AUTH_TOKEN.
      - name: Install app dependencies (without scripts)
        # Use npm 7 for auto peer-dependency resolution
        run: npm i -g npm@7 && npm ci --ignore-scripts
        env:
          # See https://github.com/actions/setup-node/blob/main/docs/advanced-usage.md#use-private-packages
          NODE_AUTH_TOKEN: ${{ secrets.GPR_READ_TOKEN }}

      # `npm rebuild` will run all those post-install scripts for us.
      - name: Run post-install scripts
        run: npm rebuild && npm run prepare --if-present


  test:
    runs-on: ubuntu-latest
    if: inputs.working-directory != inputs.infra-working-directory
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          # AWS Lambda runtimes go up to node 14
          # node-version: 16
          node-version: 14
          cache: npm
          cache-dependency-path: "${{ inputs.working-directory }}/package-lock.json"
      - name: Cache app dependencies
        uses: actions/cache@v3
        with:
          path: node_modules
          key: cdk-deploy-node_modules-${{ hashFiles('package-lock.json') }}
          restore-keys: cdk-deploy-node_modules-
      - name: pull overlay
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ inputs.overlay-cache-key-dev }}
      - uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.overlay-artifact-dev }}
      - name: install dependancies
        working-directory: ${{ inputs.working-directory }}
        run: npm ci
      - name: debug
        if: inputs.debug
        run: ls -la
      - name: test
        working-directory: ${{ inputs.working-directory }}
        run: npm run test

  test-infra:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          # AWS Lambda runtimes go up to node 14
          # node-version: 16
          node-version: 14
          cache: npm
          cache-dependency-path: "${{ inputs.infra-working-directory }}/package-lock.json"
      - name: pull overlay
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ inputs.overlay-cache-key-dev }}
      - uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.overlay-artifact-dev }}
      - name: install dependancies
        working-directory: ${{ inputs.infra-working-directory }}
        run: npm ci
      - name: debug
        if: inputs.debug
        run: ls -la
      - name: test
        working-directory: ${{ inputs.infra-working-directory }}
        run: npm run test

  # build:
  #   runs-on: ubuntu-latest
  #   if: inputs.prebuild
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: actions/setup-node@v3
  #       with:
  #         # AWS Lambda runtimes go up to node 14
  #         # node-version: 16
  #         node-version: 14
  #         cache: npm
  #         cache-dependency-path: "${{ inputs.working-directory }}/package-lock.json"
  #     - name: install dependancies
  #       working-directory: ${{ inputs.working-directory }}
  #       run: npm ci
  #     - name: test
  #       working-directory: ${{ inputs.working-directory }}
  #       run: npm run build

  deploy-dev:
    runs-on: ubuntu-latest
    needs:
      - test
      - test-infra
      # - build
    if: always()
    steps:
      - name: fail if conditional job failed
        if: ${{ needs.test-infra.result == 'failure' || needs.test.result == 'failure' }}
        run: exit 1
      - uses: clear-treasury/github-actions/actions/cdk-deploy@deploy-rework
        with:
          aws-access-key-id: ${{ secrets.nonprod-aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.nonprod-aws-secret-access-key }}
          aws-region: ${{ secrets.nonprod-aws-region }}
          working-directory: ${{ inputs.infra-working-directory }}
          environment-name: dev
          overlay-artifact: ${{ inputs.overlay-artifact-dev }}
          overlay-cache-key: ${{ inputs.overlay-cache-key-dev }}
          debug: ${{ inputs.debug }}

  integration-test:
    name: integration test
    if: inputs.do-integration-test
    needs:
      - deploy-dev
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          # AWS Lambda runtimes go up to node 14
          # node-version: 16
          node-version: 14
          cache: npm
          cache-dependency-path: "${{ inputs.integration-test-working-directory }}/package-lock.json"
      - name: pull overlay
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ inputs.overlay-cache-key-dev }}
      - uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.overlay-artifact-dev }}
      - name: install dependancies
        working-directory: ${{ inputs.integration-test-working-directory }}
        run: npm ci
      - name: debug
        if: inputs.debug
        run: ls -la
      - name: test
        working-directory: ${{ inputs.integration-test-working-directory }}
        run: npm run integration-test

  deploy-prod:
    needs:
      - integration-test
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: fail if conditional job failed
        if: ${{ needs.integration-test.result == 'failure' || needs.test.result == 'failure' }}
        run: exit 1
      - uses: clear-treasury/github-actions/actions/cdk-deploy@deploy-rework
        with:
          aws-access-key-id: ${{ secrets.prod-aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.prod-aws-secret-access-key }}
          aws-region: ${{ secrets.prod-aws-region }}
          working-directory: ${{ inputs.infra-working-directory }}
          environment-name: main
          overlay-artifact: ${{ inputs.overlay-artifact-prod }}
          overlay-cache-key: ${{ inputs.overlay-cache-key-prod }}
          debug: ${{ inputs.debug }}

  notify-failure:
    needs:
      - deploy-dev
      - deploy-prod
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: slack us for dev
        run: |
          echo "slack us"
          echo '${{ toJSON(job) }}'
      - name: fail if dev deploy failed
        if: ${{ needs.deploy-dev.result != 'success' }}
        run: exit 1
      - name: fail if prod deploy failed
        if: ${{ needs.deploy-prod.result != 'success' }}
        run: exit 1
