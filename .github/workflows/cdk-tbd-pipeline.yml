name: CDK TBD pipeline
on:
  workflow_call:
    secrets:
      prod-aws-access-key-id:
        required: true
      prod-aws-secret-access-key:
        required: true
      prod-aws-region:
        required: true

      nonprod-aws-access-key-id:
        required: true
      nonprod-aws-secret-access-key:
        required: true
      nonprod-aws-region:
        required: true

    inputs:
      working-directory:
        required: false
        type: string
        default: .

      infra-working-directory:
        required: false
        type: string
        default: .

      do-integration-test:
        required: false
        type: boolean
        default: false

      integration-test-working-directory:
        required: false
        type: string
        default: .

jobs:
  test:
    runs-on: ubuntu-latest
    if: inputs.prebuild && inputs.working-directory != inputs.infra-working-directory
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: npm
      - name: install dependancies
        working-directory: ${{ inputs.working-directory }}
        run: npm ci
      - name: test
        working-directory: ${{ inputs.working-directory }}
        run: npm run test

  test-infra:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: npm
      - name: install dependancies
        working-directory: ${{ inputs.infra-working-directory }}
        run: npm ci
      - name: test
        working-directory: ${{ inputs.infra-working-directory }}
        run: npm run test

  # build:
  #   runs-on: ubuntu-latest
  #   if: inputs.prebuild
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: actions/setup-node@v3
  #       with:
  #         node-version: 16
  #         cache: npm
  #     - name: install dependancies
  #       working-directory: ${{ inputs.working-directory }}
  #       run: npm ci
  #     - name: test
  #       working-directory: ${{ inputs.working-directory }}
  #       run: npm run build

  deploy-dev:
    runs-on: ubuntu-latest
    needs:
      - test
      - test-infra
      # - build
    if: always()
    steps:
      - name: fail if conditional job failed
        if: ${{ needs.test-infra.result == 'failure' || needs.test.result == 'failure' }}
        run: exit 1
      - uses: clear-treasury/github-actions/actions/cdk-deploy@deploy-rework
        with:
          aws-access-key-id: ${{ secrets.nonprod-aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.nonprod-aws-secret-access-key }}
          aws-region: ${{ secrets.nonprod-aws-region }}
          working-directory: ${{ inputs.infra-working-directory }}
          environment-name: dev

  integration-test:
    name: integration test
    if: inputs.do-integration-test
    needs:
      - deploy-dev
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: npm
      - name: install dependancies
        working-directory: ${{ inputs.integration-test-working-directory }}
        run: npm ci
      - name: test
        working-directory: ${{ inputs.integration-test-working-directory }}
        run: npm run integration-test

  deploy-prod:
    needs:
      - integration-test
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: fail if conditional job failed
        if: ${{ needs.integration-test.result == 'failure' || needs.test.result == 'failure' }}
        run: exit 1
      - uses: clear-treasury/github-actions/actions/cdk-deploy@deploy-rework
        with:
          aws-access-key-id: ${{ secrets.prod-aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.prod-aws-secret-access-key }}
          aws-region: ${{ secrets.prod-aws-region }}
          working-directory: ${{ inputs.infra-working-directory }}
          environment-name: main

  notify-failure:
    needs:
      - deploy-dev
      - deploy-prod
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: slack us for dev
        run: |
          echo "slack us"
          echo '${{ toJSON(job) }}'
      - name: fail if dev deploy failed
        if: ${{ needs.deploy-dev.result != 'success' }}
        run: exit 1
      - name: fail if prod deploy failed
        if: ${{ needs.deploy-prod.result != 'success' }}
        run: exit 1
